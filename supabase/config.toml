
project_id = "yinqaphicibsdqitxunm"

[api]
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. public and storage are always included.
schemas = ["public", "storage", "extensions"]
# Extra schemas to add to the search_path of every request. public is always included.
extra_search_path = ["extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialise the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version` on the remote database to check.
major_version = 15

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://localhost"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326

[auth]
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://localhost:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://localhost:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.azure]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.bitbucket]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.discord]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["identify", "guilds"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.facebook]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.github]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.gitlab]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.google]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.keycloak]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# base_url = ""
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.linkedin]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.notion]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.twitch]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user:read:email"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.twitter]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.slack]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.spotify]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user-read-email"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.workos]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[auth.external.zoom]
enabled = false
# client_id = ""
# secret = ""
# Additional scopes to request from this provider. The scope `email` is always requested.
# scopes = ["user"]
# Overrides the default URL for redirecting users to the OAuth2 flow.
# redirect_uri = ""

[analytics]
enabled = false
# Supabase sends error logs via POST periodically to the Logflare (log ingestion service) API.
# Port 54327 must be open to collector.supabase.com.
# All errors are sanitized to exclude sensitive information.
port = 54327
vector_port = 54328
# Where to send the logs. The region is included in the URL, e.g., for a project in us-east1-a, use
# https://api-us-east.hygraph.com/v2/....
# endpoint = "https://api-eu-west-1.hygraph.com/v2/..."

[experimental]
# Enables Postgres storage engine for BigQuery (BQ) foreign data wrapper.
bigquery_fdw = false

[storage]
file_size_limit = "50MiB"

[jwt]
# Overrides the default JWT secret. This is used to decode and encode auth tokens.
# Change the secret to use a custom secret for open source Supabase Auth. This works only with RSA
# 256 algorithm. To generate a key:
# $ openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048
# $ openssl rsa -in private_key.pem -pubout -out public_key.pem
# Fill in anon_key and service_role_key with JWT tokens that can be validated using the public key
# above, and generated using the private key
# To generate a key value pair:
# $ supabase gen jwt-secret
# JWT secret used to sign the anonymous key
# secret = ""
# HS algorithm to generate JWT tokens
# anon_key = ""
# service_role_key = ""

[s3]
# The S3-compatible endpoint to use for storage. If you're using Supabase Cloud, this is already set
# for you.
# endpoint = "localhost"

[functions]
[functions.process-waitlist-approval]
verify_jwt = true
